1. 单例模式的优点
单例模式的优点有以下几个方面。
■ 由于单例模式在内存中只有一个实例，减少了内存的开支，特别是一个对象需要频繁
地创建、销毁，而且创建或销毁的性能又无法优化时，单例模式的优势就非常明显。
■ 由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需
要比较多资源时，如读取配置、产生其他依赖对象时，则可以通过在启用时直接产
生一个单例对象，然后用永久驻留内存的方式来解决。
■ 单例模式可以避免对资源的多重占用，例如，一个写文件动作，由于只有一个实例
存在于内存中，避免了对同一个资源文件的同时操作。
■ 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如，可以设计一
个单例类，负责所有数据表的映射处理。
2. 单例模式的缺点
单例模式的缺点有以下几个方面。
■ 单例模式无法创建子类，扩展困难，若要扩展，除了修改代码基本上没有第二种途
径可以实现。
■ 单例模式对测试不利。在并行开发环境中，如果采用单例模式的类没有完有完成，是不
能进行测试的；单例模式的类通常不会实现接口，这也妨碍了使用 mock 的方式虚拟一个对象。
■ 单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是
单例的，是不是要用单例模式取决于环境，单例模式把“要单例”和业务逻辑融合
在一起。
3. 单例模式的使用场景
在一个系统中，如果要求一个类有且仅有一个实例，当出现多个实例时就会造成不良反
应，则此时可以采用单例模式。可以采用单例模式的典型场景如下。
■ 要求生成唯一序列号的环境。
■ 在整个项目中需要一个共享访问点或共享数据，例如，一个 Web 页面上的计数器，
可以不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并确保是
线程安全的。
■ 创建一个对象需要消耗的资源过多，如访问 IO 和数据库等资源。
■ 需要定义大量的静态常量和静态方法（如工具类）的环境，可以采用单例模式（也
可以采用直接声明为 static 的方式）。

